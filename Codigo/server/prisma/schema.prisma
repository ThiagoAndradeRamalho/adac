generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model endereco {
  id          Int      @id @default(autoincrement())
  cep         String   @db.VarChar(20)
  logradouro  String   @db.VarChar(255)
  numero      String   @db.VarChar(50)
  complemento String?  @db.VarChar(255)
  bairro      String   @db.VarChar(100)
  cidade      String   @db.VarChar(100)
  estado      String   @db.VarChar(50)
  usuarioid   Int?     @unique
  usuario     usuario? @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model infovoluntario {
  id              Int      @id @default(autoincrement())
  tempodisponivel String
  contribuicoes   String
  profissao       String   @db.VarChar(255)
  usuarioid       Int?     @unique
  usuario         usuario? @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tarefa {
  id             Int              @id @default(autoincrement())
  titulo         String           @db.VarChar(255)
  descricao      String
  datacriada     DateTime         @db.Timestamp(6)
  ordem          Int
  status         tarefa_status
  usuario_tarefa usuario_tarefa[]

  @@map("tarefa")
}

model usuario {
  id               Int              @id @default(autoincrement())
  cpf              String           @unique @db.VarChar(14)
  datanascimento   DateTime         @db.Timestamp(6)
  nome             String           @db.VarChar(255)
  email            String           @unique @db.VarChar(255)
  tel              String           @db.VarChar(20)
  senha            String           @db.VarChar(255)
  senha_salt       String           @db.VarChar(255)
  resettoken       String?          @default("") @db.VarChar(255)
  resettokenexpiry DateTime?        @default(now()) @db.Timestamp(6)
  tipo             usuariotipo?     @default(CLIENTE)
  adocao           adocao[]
  endereco         endereco?
  infovoluntario   infovoluntario?
  usuario_tarefa   usuario_tarefa[]

  @@index([email], map: "idx_usuario_email")
}

model usuario_tarefa {
  usuarioid Int
  tarefaid  Int
  tarefa    tarefa  @relation(fields: [tarefaid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuario   usuario @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([usuarioid, tarefaid])
}

model feedback {
  id     Int    @id @default(autoincrement())
  text   String
  author String @db.VarChar(255)
}

model patrocinio {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)
  img  String @db.VarChar(255)
}

model adocao {
  id                    Int          @id @default(autoincrement())
  data                  DateTime     @db.Timestamp(6)
  status                statusadocao
  proximoacompanhamento DateTime?    @db.Timestamp(6)
  petid                 Int?
  usuarioid             Int?
  respostasformulario   Json?
  pet                   pet?         @relation(fields: [petid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuario               usuario?     @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([petid], map: "idx_adocao_pet")
  @@index([usuarioid], map: "idx_adocao_usuario")
}

model evento {
  id                  Int         @id @default(autoincrement())
  nome                String      @db.VarChar(255)
  data                DateTime    @db.Timestamp(6)
  horainicio          String?     @db.VarChar(10)
  horafim             String?     @db.VarChar(10)
  tipoevento          tipoevento? @default(Visita)
  descricao           String?
  local               String?     @db.VarChar(255)
  organizador         String?     @db.VarChar(255)
  numeroparticipantes Int?
  color               String?     @default("#e6f7ff") @db.VarChar(7)
  url                 String?     @db.VarChar(255)
}

model pet {
  id                   Int       @id @default(autoincrement())
  nome                 String    @db.VarChar(255)
  idade                Int
  sexo                 String    @db.VarChar(50)
  porte                String    @db.VarChar(50)
  deficiencia          String    @db.VarChar(255)
  descricaodeficiencia String?
  comportamento        String
  img                  String    @db.VarChar(255)
  cor                  String    @db.VarChar(50)
  peso                 Float
  raca                 String    @db.VarChar(100)
  especie              String    @db.VarChar(100)
  protetor             String?   @db.VarChar(255)
  dataresgate          DateTime? @db.Timestamp(6)
  historico            String?
  conclusoes           String?
  exameclinico         String?
  adocao               adocao[]
}

enum tarefa_status {
  BACKLOG
  FAZER
  ANDAMENTO
  CONCLUIDO
}

enum statusadocao {
  PENDENTE
  APROVADA
  RECUSADA
  EM_ANDAMENTO
}

enum tipoevento {
  Evento
  Feira
  Visita
}

enum usuariotipo {
  CLIENTE
  VOLUNTARIO
  ADMIN
}
